"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var devTools;
if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {
    console.log("You're currently using a development version of Laco");
    if (window.__REDUX_DEVTOOLS_EXTENSION__) {
        devTools = window.__REDUX_DEVTOOLS_EXTENSION__.connect();
        setTimeout(function () { return devTools.init(STORE); }, 200);
    }
}
var STORE = {};
var COUNTER = 0;
var Store = /** @class */ (function () {
    function Store(initialState, name) {
        var _this = this;
        this.name = '';
        this._listeners = [];
        if (name)
            this.name = name;
        this.idx = COUNTER++;
        STORE[this.idx] = initialState;
        this.initialState = initialState;
        if (typeof window !== 'undefined' &&
            process.env.NODE_ENV !== 'production') {
            if (devTools) {
                devTools.subscribe(function (message) {
                    switch (message.payload && message.payload.type) {
                        case 'JUMP_TO_STATE':
                        case 'JUMP_TO_ACTION':
                            STORE[_this.idx] = JSON.parse(message.state)[_this.idx];
                            _this._listeners.forEach(function (fn) { return fn(); });
                    }
                });
            }
        }
    }
    Store.prototype.get = function () {
        return STORE[this.idx];
    };
    Store.prototype.set = function (state, info) {
        if (this.condition) {
            var newState = this.condition(__assign({}, STORE[this.idx], state(STORE[this.idx])), info);
            if (newState)
                STORE[this.idx] = newState;
        }
        else {
            STORE[this.idx] = __assign({}, STORE[this.idx], state(STORE[this.idx]));
        }
        if (typeof window !== 'undefined' &&
            process.env.NODE_ENV !== 'production') {
            if (devTools) {
                devTools.send(this.name ? this.name + ' - ' + info : info, STORE);
            }
        }
        this._listeners.forEach(function (fn) { return fn(); });
    };
    Store.prototype.replace = function (state, info) {
        if (this.condition) {
            var newState = this.condition(state(STORE[this.idx]), info);
            if (newState)
                STORE[this.idx] = newState;
        }
        else {
            STORE[this.idx] = state(STORE[this.idx]);
        }
        if (typeof window !== 'undefined' &&
            process.env.NODE_ENV !== 'production') {
            if (devTools) {
                devTools.send(this.name ? this.name + ' - ' + info : info, STORE);
            }
        }
        this._listeners.forEach(function (fn) { return fn(); });
    };
    Store.prototype.setCondition = function (func) {
        this.condition = func;
    };
    Store.prototype.reset = function () {
        STORE[this.idx] = this.initialState;
    };
    Store.prototype.subscribe = function (fn) {
        this._listeners.push(fn);
    };
    Store.prototype.unsubscribe = function (fn) {
        this._listeners = this._listeners.filter(function (f) { return f !== fn; });
    };
    Store.prototype.dispatch = function (value, info) {
        if (typeof window !== 'undefined' &&
            process.env.NODE_ENV !== 'production') {
            if (devTools) {
                devTools.send(this.name ? this.name + ' - ' + info : info, STORE);
            }
        }
        return value;
    };
    return Store;
}());
exports.Store = Store;
function dispatch(value, info) {
    if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {
        if (devTools) {
            devTools.send(info, STORE);
        }
    }
    return value;
}
exports.dispatch = dispatch;
function getGlobalState() {
    return STORE;
}
exports.getGlobalState = getGlobalState;
function resetGlobalState() {
    STORE = {};
}
exports.resetGlobalState = resetGlobalState;
function replaceGlobalState(state) {
    STORE = state;
}
exports.replaceGlobalState = replaceGlobalState;
