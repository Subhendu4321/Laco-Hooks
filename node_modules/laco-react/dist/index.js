"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var Subscribe = /** @class */ (function (_super) {
    __extends(Subscribe, _super);
    function Subscribe() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.stores = [];
        _this.onUpdate = function () {
            _this.forceUpdate();
        };
        return _this;
    }
    Subscribe.prototype.componentWillReceiveProps = function () {
        this._unsubscribe();
    };
    Subscribe.prototype.componentWillUnmount = function () {
        this._unsubscribe();
    };
    Subscribe.prototype._unsubscribe = function () {
        var _this = this;
        this.stores.forEach(function (store) {
            store.unsubscribe(_this.onUpdate);
        });
    };
    Subscribe.prototype.render = function () {
        var _this = this;
        var _a;
        var stores = [];
        var states = this.props.to.map(function (store) {
            store.unsubscribe(_this.onUpdate);
            store.subscribe(_this.onUpdate);
            stores.push(store);
            return store.get();
        });
        this.stores = stores;
        return (_a = this.props).children.apply(_a, states);
    };
    return Subscribe;
}(react_1.PureComponent));
exports.Subscribe = Subscribe;
function useStore(store) {
    var _a = react_1.useState(store.get()), state = _a[0], setState = _a[1];
    function updateState() {
        setState(store.get());
    }
    react_1.useEffect(function () {
        store.subscribe(updateState);
        return function () { return store.unsubscribe(updateState); };
    });
    return state;
}
exports.useStore = useStore;
function useStores(stores) {
    var _a = react_1.useState(stores.map(function (store) { return store.get(); })), state = _a[0], setState = _a[1];
    function updateState() {
        setState(stores.map(function (store) { return store.get(); }));
    }
    react_1.useEffect(function () {
        stores.map(function (store) { return store.subscribe(updateState); });
        return function () { return stores.map(function (store) { return store.unsubscribe(updateState); }); };
    });
    return state;
}
exports.useStores = useStores;
